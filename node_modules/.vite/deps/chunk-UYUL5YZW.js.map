{
  "version": 3,
  "sources": ["../../vuetify/src/composables/group.ts"],
  "sourcesContent": ["// Composables\nimport { useProxiedModel } from './proxiedModel'\n\n// Utilities\nimport { computed, inject, onBeforeUnmount, onMounted, onUpdated, provide, reactive, toRef, unref, useId, watch } from 'vue'\nimport { consoleWarn, deepEqual, findChildrenWithProvide, getCurrentInstance, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, ExtractPropTypes, InjectionKey, PropType, Ref, UnwrapRef } from 'vue'\nimport type { EventProp } from '@/util'\n\nexport interface GroupItem {\n  id: string\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n  useIndexAsValue?: boolean\n}\n\nexport interface GroupProps {\n  disabled: boolean\n  modelValue: unknown\n  multiple?: boolean\n  mandatory?: boolean | 'force' | undefined\n  max?: number | undefined\n  selectedClass: string | undefined\n  'onUpdate:modelValue': EventProp<[unknown]> | undefined\n}\n\nexport interface GroupProvide {\n  register: (item: GroupItem, cmp: ComponentInternalInstance) => void\n  unregister: (id: string) => void\n  select: (id: string, value: boolean) => void\n  selected: Ref<Readonly<string[]>>\n  isSelected: (id: string) => boolean\n  prev: () => void\n  next: () => void\n  selectedClass: Ref<string | undefined>\n  items: Readonly<Ref<{\n    id: string\n    value: unknown\n    disabled: boolean | undefined\n  }[]>>\n  disabled: Ref<boolean | undefined>\n  getItemIndex: (value: unknown) => number\n}\n\nexport interface GroupItemProvide {\n  id: string\n  isSelected: Ref<boolean>\n  isFirst: Ref<boolean>\n  isLast: Ref<boolean>\n  toggle: () => void\n  select: (value: boolean) => void\n  selectedClass: Ref<(string | undefined)[] | false>\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n  group: GroupProvide\n  register: () => void\n  unregister: () => void\n}\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined,\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String] as PropType<boolean | 'force'>,\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean,\n}, 'group')\n\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String,\n}, 'group-item')\n\nexport interface GroupItemProps extends ExtractPropTypes<ReturnType<typeof makeGroupItemProps>> {\n  'onGroup:selected': EventProp<[{ value: boolean }]> | undefined\n}\n\n// Composables\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required?: true,\n): GroupItemProvide\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required: false,\n): GroupItemProvide | null\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required = true,\n): GroupItemProvide | null {\n  const vm = getCurrentInstance('useGroupItem')\n\n  if (!vm) {\n    throw new Error(\n      '[Vuetify] useGroupItem composable must be used inside a component setup function'\n    )\n  }\n\n  const id = useId()\n\n  provide(Symbol.for(`${injectKey.description}:id`), id)\n\n  const group = inject(injectKey, null)\n\n  if (!group) {\n    if (!required) return group\n\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`)\n  }\n\n  const value = toRef(() => props.value)\n  const disabled = computed(() => !!(group.disabled.value || props.disabled))\n\n  function register () {\n    group?.register({ id, value, disabled }, vm)\n  }\n\n  function unregister () {\n    group?.unregister(id)\n  }\n\n  onMounted(() => register())\n  onBeforeUnmount(() => unregister())\n\n  const isSelected = computed(() => {\n    return group.isSelected(id)\n  })\n  const isFirst = computed(() => {\n    return group.items.value[0].id === id\n  })\n  const isLast = computed(() => {\n    return group.items.value[group.items.value.length - 1].id === id\n  })\n\n  const selectedClass = computed(() => isSelected.value && [group.selectedClass.value, props.selectedClass])\n\n  watch(isSelected, value => {\n    vm.emit('group:selected', { value })\n  }, { flush: 'sync' })\n\n  return {\n    id,\n    isSelected,\n    isFirst,\n    isLast,\n    toggle: () => group.select(id, !isSelected.value),\n    select: (value: boolean) => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group,\n    register,\n    unregister,\n  }\n}\n\nexport function useGroup (\n  props: GroupProps,\n  injectKey: InjectionKey<GroupProvide>\n) {\n  let isUnmounted = false\n  const items = reactive<GroupItem[]>([])\n  const selected = useProxiedModel(\n    props,\n    'modelValue',\n    [],\n    v => {\n      if (v === undefined) return []\n\n      return getIds(items, v === null ? [null] : wrapInArray(v))\n    },\n    v => {\n      const arr = getValues(items, v)\n\n      return props.multiple ? arr : arr[0]\n    }\n  )\n\n  const groupVm = getCurrentInstance('useGroup')\n\n  function register (item: GroupItem, vm: ComponentInternalInstance) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item as unknown as UnwrapRef<GroupItem>\n\n    const key = Symbol.for(`${injectKey.description}:id`)\n    const children = findChildrenWithProvide(key, groupVm?.vnode)\n    const index = children.indexOf(vm)\n\n    if (unref(unwrapped.value) === undefined) {\n      unwrapped.value = index\n      unwrapped.useIndexAsValue = true\n    }\n\n    if (index > -1) {\n      items.splice(index, 0, unwrapped)\n    } else {\n      items.push(unwrapped)\n    }\n  }\n\n  function unregister (id: string) {\n    if (isUnmounted) return\n\n    // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue()\n\n    const index = items.findIndex(item => item.id === id)\n    items.splice(index, 1)\n  }\n\n  // If mandatory and nothing is selected, then select first non-disabled item\n  function forceMandatoryValue () {\n    const item = items.find(item => !item.disabled)\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id]\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue()\n  })\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  onUpdated(() => {\n    // #19655 update the items that use the index as the value.\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].useIndexAsValue) {\n        items[i].value = i\n      }\n    }\n  })\n\n  function select (id: string, value?: boolean) {\n    const item = items.find(item => item.id === id)\n    if (value && item?.disabled) return\n\n    if (props.multiple) {\n      const internalValue = selected.value.slice()\n      const index = internalValue.findIndex(v => v === id)\n      const isSelected = ~index\n      value = value ?? !isSelected\n\n      // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n      if (\n        isSelected &&\n        props.mandatory &&\n        internalValue.length <= 1\n      ) return\n\n      // We can't add value if it would\n      // cause max limit to be exceeded\n      if (\n        !isSelected &&\n        props.max != null &&\n        internalValue.length + 1 > props.max\n      ) return\n\n      if (index < 0 && value) internalValue.push(id)\n      else if (index >= 0 && !value) internalValue.splice(index, 1)\n\n      selected.value = internalValue\n    } else {\n      const isSelected = selected.value.includes(id)\n      if (props.mandatory && isSelected) return\n      if (!isSelected && !value) return\n\n      selected.value = (value ?? !isSelected) ? [id] : []\n    }\n  }\n\n  function step (offset: number) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop')\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled)\n      item && (selected.value = [item.id])\n    } else {\n      const currentId = selected.value[0]\n      const currentIndex = items.findIndex(i => i.id === currentId)\n\n      let newIndex = (currentIndex + offset) % items.length\n      let newItem = items[newIndex]\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length\n        newItem = items[newIndex]\n      }\n\n      if (newItem.disabled) return\n\n      selected.value = [items[newIndex].id]\n    }\n  }\n\n  const state: GroupProvide = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(() => props.disabled),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: (id: string) => selected.value.includes(id),\n    selectedClass: toRef(() => props.selectedClass),\n    items: toRef(() => items),\n    getItemIndex: (value: unknown) => getItemIndex(items, value),\n  }\n\n  provide(injectKey, state)\n\n  return state\n}\n\nfunction getItemIndex (items: UnwrapRef<GroupItem[]>, value: unknown) {\n  const ids = getIds(items, [value])\n\n  if (!ids.length) return -1\n\n  return items.findIndex(item => item.id === ids[0])\n}\n\nfunction getIds (items: UnwrapRef<GroupItem[]>, modelValue: any[]) {\n  const ids: string[] = []\n\n  modelValue.forEach(value => {\n    const item = items.find(item => deepEqual(value, item.value))\n    const itemByIndex = items[value]\n\n    if (item?.value !== undefined) {\n      ids.push(item.id)\n    } else if (itemByIndex?.useIndexAsValue) {\n      ids.push(itemByIndex.id)\n    }\n  })\n\n  return ids\n}\n\nfunction getValues (items: UnwrapRef<GroupItem[]>, ids: any[]) {\n  const values: unknown[] = []\n\n  ids.forEach(id => {\n    const itemIndex = items.findIndex(item => item.id === id)\n    if (~itemIndex) {\n      const item = items[itemIndex]\n      values.push(item.value !== undefined ? item.value : itemIndex)\n    }\n  })\n\n  return values\n}\n"],
  "mappings": "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",
  "names": ["makeGroupProps", "propsFactory", "modelValue", "type", "default", "undefined", "multiple", "Boolean", "mandatory", "String", "max", "Number", "selectedClass", "disabled", "makeGroupItemProps", "value", "useGroupItem", "props", "injectKey", "required", "arguments", "length", "vm", "getCurrentInstance", "Error", "id", "useId", "provide", "Symbol", "for", "description", "group", "inject", "toRef", "computed", "register", "unregister", "onMounted", "onBeforeUnmount", "isSelected", "isFirst", "items", "isLast", "watch", "emit", "flush", "toggle", "select", "useGroup", "isUnmounted", "reactive", "selected", "useProxiedModel", "v", "getIds", "wrapInArray", "arr", "getValues", "groupVm", "item", "unwrapped", "key", "children", "findChildrenWithProvide", "vnode", "index", "indexOf", "unref", "useIndexAsValue", "splice", "push", "forceMandatoryValue", "findIndex", "find", "onUpdated", "i", "internalValue", "slice", "includes", "step", "offset", "consoleWarn", "currentId", "currentIndex", "newIndex", "newItem", "state", "prev", "next", "getItemIndex", "ids", "forEach", "deepEqual", "itemByIndex", "values", "itemIndex"]
}
